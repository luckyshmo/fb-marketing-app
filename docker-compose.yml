version: "3.8"
services:
  # reverse-proxy:
  #   # The official v2 Traefik docker image
  #   image: traefik:v2.2
  #   # Enables the web UI and tells Traefik to listen to docker
  #   command:
  #     - "--api.insecure=true"
  #     - "--providers.docker"
  #     - "--providers.docker.exposedByDefault=false"
  #   ports:
  #     # The HTTP port
  #     - "80:80"
  #     # The Web UI (enabled by --api.insecure=true)
  #     - "9090:9090"
  #   volumes:
  #     # So that Traefik can listen to the Docker events
  #     - /var/run/docker.sock:/var/run/docker.sock
  postgres-targetted:
    image: "postgres:alpine"
    environment:
      - POSTGRES_PASSWORD=example
    ports:
      - "5432:5432"
    #   Set a volume for data and initial sql script
    #   May configure initial db for future demo
    volumes:
      - "pgdata_targetted:/var/lib/postgresql/data"
    command: ["postgres", "-c", "log_statement=all"]
  targetted-back:
    build: ./targetted-back/
    command: ./targetted-back
    image: targetted-back
    env_file: ./targetted-back/.env.dev
    ports:
      - "8080:8080"
    environment:
      - ENV=dev
    depends_on:
      - postgres-targetted
  targetted-client:
    build:
      context: ./targetted-client
    image: targetted-client # if we don't give image name, traefik won't create router ü§∑‚Äç‚ôÇÔ∏è
    # expose:
    #   - "3000"
    ports:
      - "3000:8080"
    environment:
      - VUE_APP_API_URL=0.0.0.0:8080
      - VUE_APP_FACEBOOK_APP_ID=914216406086238
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.targetted-client.rule=Host(`malcorp.test`) && PathPrefix(`/targetted`)"
    volumes:
      - ./targetted-client:/app
      - /app/node_modules #avoid overwriting node_modules
    # depends_on: 
    #   - reverse-proxy    
volumes:
  pgdata_targetted:
